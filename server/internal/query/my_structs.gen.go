// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yafgo/yafgo-layout/internal/database"
)

func newMyStruct(db *gorm.DB, opts ...gen.DOOption) myStruct {
	_myStruct := myStruct{}

	_myStruct.myStructDo.UseDB(db, opts...)
	_myStruct.myStructDo.UseModel(&database.MyStruct{})

	tableName := _myStruct.myStructDo.TableName()
	_myStruct.ALL = field.NewAsterisk(tableName)
	_myStruct.ID = field.NewInt64(tableName, "id")
	_myStruct.Name = field.NewString(tableName, "name")
	_myStruct.Age = field.NewInt64(tableName, "age")

	_myStruct.fillFieldMap()

	return _myStruct
}

type myStruct struct {
	myStructDo myStructDo

	ALL  field.Asterisk
	ID   field.Int64
	Name field.String
	Age  field.Int64

	fieldMap map[string]field.Expr
}

func (m myStruct) Table(newTableName string) *myStruct {
	m.myStructDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m myStruct) As(alias string) *myStruct {
	m.myStructDo.DO = *(m.myStructDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *myStruct) updateTableName(table string) *myStruct {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.Name = field.NewString(table, "name")
	m.Age = field.NewInt64(table, "age")

	m.fillFieldMap()

	return m
}

func (m *myStruct) WithContext(ctx context.Context) IMyStructDo { return m.myStructDo.WithContext(ctx) }

func (m myStruct) TableName() string { return m.myStructDo.TableName() }

func (m myStruct) Alias() string { return m.myStructDo.Alias() }

func (m *myStruct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *myStruct) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["age"] = m.Age
}

func (m myStruct) clone(db *gorm.DB) myStruct {
	m.myStructDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m myStruct) replaceDB(db *gorm.DB) myStruct {
	m.myStructDo.ReplaceDB(db)
	return m
}

type myStructDo struct{ gen.DO }

type IMyStructDo interface {
	gen.SubQuery
	Debug() IMyStructDo
	WithContext(ctx context.Context) IMyStructDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMyStructDo
	WriteDB() IMyStructDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMyStructDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMyStructDo
	Not(conds ...gen.Condition) IMyStructDo
	Or(conds ...gen.Condition) IMyStructDo
	Select(conds ...field.Expr) IMyStructDo
	Where(conds ...gen.Condition) IMyStructDo
	Order(conds ...field.Expr) IMyStructDo
	Distinct(cols ...field.Expr) IMyStructDo
	Omit(cols ...field.Expr) IMyStructDo
	Join(table schema.Tabler, on ...field.Expr) IMyStructDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMyStructDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMyStructDo
	Group(cols ...field.Expr) IMyStructDo
	Having(conds ...gen.Condition) IMyStructDo
	Limit(limit int) IMyStructDo
	Offset(offset int) IMyStructDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMyStructDo
	Unscoped() IMyStructDo
	Create(values ...*database.MyStruct) error
	CreateInBatches(values []*database.MyStruct, batchSize int) error
	Save(values ...*database.MyStruct) error
	First() (*database.MyStruct, error)
	Take() (*database.MyStruct, error)
	Last() (*database.MyStruct, error)
	Find() ([]*database.MyStruct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*database.MyStruct, err error)
	FindInBatches(result *[]*database.MyStruct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*database.MyStruct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMyStructDo
	Assign(attrs ...field.AssignExpr) IMyStructDo
	Joins(fields ...field.RelationField) IMyStructDo
	Preload(fields ...field.RelationField) IMyStructDo
	FirstOrInit() (*database.MyStruct, error)
	FirstOrCreate() (*database.MyStruct, error)
	FindByPage(offset int, limit int) (result []*database.MyStruct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMyStructDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result database.MyStruct, err error)
}

// where(id=@id)
func (m myStructDo) GetByID(id int64) (result database.MyStruct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("id=? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m myStructDo) Debug() IMyStructDo {
	return m.withDO(m.DO.Debug())
}

func (m myStructDo) WithContext(ctx context.Context) IMyStructDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m myStructDo) ReadDB() IMyStructDo {
	return m.Clauses(dbresolver.Read)
}

func (m myStructDo) WriteDB() IMyStructDo {
	return m.Clauses(dbresolver.Write)
}

func (m myStructDo) Session(config *gorm.Session) IMyStructDo {
	return m.withDO(m.DO.Session(config))
}

func (m myStructDo) Clauses(conds ...clause.Expression) IMyStructDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m myStructDo) Returning(value interface{}, columns ...string) IMyStructDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m myStructDo) Not(conds ...gen.Condition) IMyStructDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m myStructDo) Or(conds ...gen.Condition) IMyStructDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m myStructDo) Select(conds ...field.Expr) IMyStructDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m myStructDo) Where(conds ...gen.Condition) IMyStructDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m myStructDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMyStructDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m myStructDo) Order(conds ...field.Expr) IMyStructDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m myStructDo) Distinct(cols ...field.Expr) IMyStructDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m myStructDo) Omit(cols ...field.Expr) IMyStructDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m myStructDo) Join(table schema.Tabler, on ...field.Expr) IMyStructDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m myStructDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMyStructDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m myStructDo) RightJoin(table schema.Tabler, on ...field.Expr) IMyStructDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m myStructDo) Group(cols ...field.Expr) IMyStructDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m myStructDo) Having(conds ...gen.Condition) IMyStructDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m myStructDo) Limit(limit int) IMyStructDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m myStructDo) Offset(offset int) IMyStructDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m myStructDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMyStructDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m myStructDo) Unscoped() IMyStructDo {
	return m.withDO(m.DO.Unscoped())
}

func (m myStructDo) Create(values ...*database.MyStruct) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m myStructDo) CreateInBatches(values []*database.MyStruct, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m myStructDo) Save(values ...*database.MyStruct) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m myStructDo) First() (*database.MyStruct, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*database.MyStruct), nil
	}
}

func (m myStructDo) Take() (*database.MyStruct, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*database.MyStruct), nil
	}
}

func (m myStructDo) Last() (*database.MyStruct, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*database.MyStruct), nil
	}
}

func (m myStructDo) Find() ([]*database.MyStruct, error) {
	result, err := m.DO.Find()
	return result.([]*database.MyStruct), err
}

func (m myStructDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*database.MyStruct, err error) {
	buf := make([]*database.MyStruct, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m myStructDo) FindInBatches(result *[]*database.MyStruct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m myStructDo) Attrs(attrs ...field.AssignExpr) IMyStructDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m myStructDo) Assign(attrs ...field.AssignExpr) IMyStructDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m myStructDo) Joins(fields ...field.RelationField) IMyStructDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m myStructDo) Preload(fields ...field.RelationField) IMyStructDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m myStructDo) FirstOrInit() (*database.MyStruct, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*database.MyStruct), nil
	}
}

func (m myStructDo) FirstOrCreate() (*database.MyStruct, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*database.MyStruct), nil
	}
}

func (m myStructDo) FindByPage(offset int, limit int) (result []*database.MyStruct, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m myStructDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m myStructDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m myStructDo) Delete(models ...*database.MyStruct) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *myStructDo) withDO(do gen.Dao) *myStructDo {
	m.DO = *do.(*gen.DO)
	return m
}
