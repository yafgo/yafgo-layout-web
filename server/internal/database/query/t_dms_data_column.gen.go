// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yafgo/yafgo-layout/internal/database/model"
)

func newDmsDataColumn(db *gorm.DB, opts ...gen.DOOption) dmsDataColumn {
	_dmsDataColumn := dmsDataColumn{}

	_dmsDataColumn.dmsDataColumnDo.UseDB(db, opts...)
	_dmsDataColumn.dmsDataColumnDo.UseModel(&model.DmsDataColumn{})

	tableName := _dmsDataColumn.dmsDataColumnDo.TableName()
	_dmsDataColumn.ALL = field.NewAsterisk(tableName)
	_dmsDataColumn.ID = field.NewInt64(tableName, "id")
	_dmsDataColumn.DataID = field.NewInt64(tableName, "data_id")
	_dmsDataColumn.TableName_ = field.NewString(tableName, "table_name")
	_dmsDataColumn.Name = field.NewString(tableName, "name")
	_dmsDataColumn.ColumnName = field.NewString(tableName, "column_name")
	_dmsDataColumn.ColumnType = field.NewString(tableName, "column_type")
	_dmsDataColumn.DataType = field.NewString(tableName, "data_type")
	_dmsDataColumn.Order = field.NewInt32(tableName, "order")
	_dmsDataColumn.IsNullable = field.NewBool(tableName, "is_nullable")
	_dmsDataColumn.CharMaxLength = field.NewInt32(tableName, "char_max_length")
	_dmsDataColumn.Comment = field.NewString(tableName, "comment")
	_dmsDataColumn.Settings = field.NewString(tableName, "settings")
	_dmsDataColumn.CreatedAt = field.NewTime(tableName, "created_at")
	_dmsDataColumn.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dmsDataColumn.DeletedAt = field.NewField(tableName, "deleted_at")

	_dmsDataColumn.fillFieldMap()

	return _dmsDataColumn
}

type dmsDataColumn struct {
	dmsDataColumnDo dmsDataColumnDo

	ALL           field.Asterisk
	ID            field.Int64
	DataID        field.Int64  // 数据表id
	TableName_    field.String // 真实表名
	Name          field.String // 显示列名
	ColumnName    field.String // 真实列名
	ColumnType    field.String // 列类型
	DataType      field.String // 数据类型
	Order         field.Int32  // 字段排序
	IsNullable    field.Bool   // 可为null, 0:否,1:是
	CharMaxLength field.Int32  // 字段最大字符长度
	Comment       field.String // 字段注释
	Settings      field.String // 字段配置
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (d dmsDataColumn) Table(newTableName string) *dmsDataColumn {
	d.dmsDataColumnDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dmsDataColumn) As(alias string) *dmsDataColumn {
	d.dmsDataColumnDo.DO = *(d.dmsDataColumnDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dmsDataColumn) updateTableName(table string) *dmsDataColumn {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.DataID = field.NewInt64(table, "data_id")
	d.TableName_ = field.NewString(table, "table_name")
	d.Name = field.NewString(table, "name")
	d.ColumnName = field.NewString(table, "column_name")
	d.ColumnType = field.NewString(table, "column_type")
	d.DataType = field.NewString(table, "data_type")
	d.Order = field.NewInt32(table, "order")
	d.IsNullable = field.NewBool(table, "is_nullable")
	d.CharMaxLength = field.NewInt32(table, "char_max_length")
	d.Comment = field.NewString(table, "comment")
	d.Settings = field.NewString(table, "settings")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")

	d.fillFieldMap()

	return d
}

func (d *dmsDataColumn) WithContext(ctx context.Context) IDmsDataColumnDo {
	return d.dmsDataColumnDo.WithContext(ctx)
}

func (d dmsDataColumn) TableName() string { return d.dmsDataColumnDo.TableName() }

func (d dmsDataColumn) Alias() string { return d.dmsDataColumnDo.Alias() }

func (d *dmsDataColumn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dmsDataColumn) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 15)
	d.fieldMap["id"] = d.ID
	d.fieldMap["data_id"] = d.DataID
	d.fieldMap["table_name"] = d.TableName_
	d.fieldMap["name"] = d.Name
	d.fieldMap["column_name"] = d.ColumnName
	d.fieldMap["column_type"] = d.ColumnType
	d.fieldMap["data_type"] = d.DataType
	d.fieldMap["order"] = d.Order
	d.fieldMap["is_nullable"] = d.IsNullable
	d.fieldMap["char_max_length"] = d.CharMaxLength
	d.fieldMap["comment"] = d.Comment
	d.fieldMap["settings"] = d.Settings
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
}

func (d dmsDataColumn) clone(db *gorm.DB) dmsDataColumn {
	d.dmsDataColumnDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dmsDataColumn) replaceDB(db *gorm.DB) dmsDataColumn {
	d.dmsDataColumnDo.ReplaceDB(db)
	return d
}

type dmsDataColumnDo struct{ gen.DO }

type IDmsDataColumnDo interface {
	gen.SubQuery
	Debug() IDmsDataColumnDo
	WithContext(ctx context.Context) IDmsDataColumnDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDmsDataColumnDo
	WriteDB() IDmsDataColumnDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDmsDataColumnDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDmsDataColumnDo
	Not(conds ...gen.Condition) IDmsDataColumnDo
	Or(conds ...gen.Condition) IDmsDataColumnDo
	Select(conds ...field.Expr) IDmsDataColumnDo
	Where(conds ...gen.Condition) IDmsDataColumnDo
	Order(conds ...field.Expr) IDmsDataColumnDo
	Distinct(cols ...field.Expr) IDmsDataColumnDo
	Omit(cols ...field.Expr) IDmsDataColumnDo
	Join(table schema.Tabler, on ...field.Expr) IDmsDataColumnDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDmsDataColumnDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDmsDataColumnDo
	Group(cols ...field.Expr) IDmsDataColumnDo
	Having(conds ...gen.Condition) IDmsDataColumnDo
	Limit(limit int) IDmsDataColumnDo
	Offset(offset int) IDmsDataColumnDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDmsDataColumnDo
	Unscoped() IDmsDataColumnDo
	Create(values ...*model.DmsDataColumn) error
	CreateInBatches(values []*model.DmsDataColumn, batchSize int) error
	Save(values ...*model.DmsDataColumn) error
	First() (*model.DmsDataColumn, error)
	Take() (*model.DmsDataColumn, error)
	Last() (*model.DmsDataColumn, error)
	Find() ([]*model.DmsDataColumn, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DmsDataColumn, err error)
	FindInBatches(result *[]*model.DmsDataColumn, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DmsDataColumn) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDmsDataColumnDo
	Assign(attrs ...field.AssignExpr) IDmsDataColumnDo
	Joins(fields ...field.RelationField) IDmsDataColumnDo
	Preload(fields ...field.RelationField) IDmsDataColumnDo
	FirstOrInit() (*model.DmsDataColumn, error)
	FirstOrCreate() (*model.DmsDataColumn, error)
	FindByPage(offset int, limit int) (result []*model.DmsDataColumn, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDmsDataColumnDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dmsDataColumnDo) Debug() IDmsDataColumnDo {
	return d.withDO(d.DO.Debug())
}

func (d dmsDataColumnDo) WithContext(ctx context.Context) IDmsDataColumnDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dmsDataColumnDo) ReadDB() IDmsDataColumnDo {
	return d.Clauses(dbresolver.Read)
}

func (d dmsDataColumnDo) WriteDB() IDmsDataColumnDo {
	return d.Clauses(dbresolver.Write)
}

func (d dmsDataColumnDo) Session(config *gorm.Session) IDmsDataColumnDo {
	return d.withDO(d.DO.Session(config))
}

func (d dmsDataColumnDo) Clauses(conds ...clause.Expression) IDmsDataColumnDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dmsDataColumnDo) Returning(value interface{}, columns ...string) IDmsDataColumnDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dmsDataColumnDo) Not(conds ...gen.Condition) IDmsDataColumnDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dmsDataColumnDo) Or(conds ...gen.Condition) IDmsDataColumnDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dmsDataColumnDo) Select(conds ...field.Expr) IDmsDataColumnDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dmsDataColumnDo) Where(conds ...gen.Condition) IDmsDataColumnDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dmsDataColumnDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDmsDataColumnDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dmsDataColumnDo) Order(conds ...field.Expr) IDmsDataColumnDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dmsDataColumnDo) Distinct(cols ...field.Expr) IDmsDataColumnDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dmsDataColumnDo) Omit(cols ...field.Expr) IDmsDataColumnDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dmsDataColumnDo) Join(table schema.Tabler, on ...field.Expr) IDmsDataColumnDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dmsDataColumnDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDmsDataColumnDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dmsDataColumnDo) RightJoin(table schema.Tabler, on ...field.Expr) IDmsDataColumnDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dmsDataColumnDo) Group(cols ...field.Expr) IDmsDataColumnDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dmsDataColumnDo) Having(conds ...gen.Condition) IDmsDataColumnDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dmsDataColumnDo) Limit(limit int) IDmsDataColumnDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dmsDataColumnDo) Offset(offset int) IDmsDataColumnDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dmsDataColumnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDmsDataColumnDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dmsDataColumnDo) Unscoped() IDmsDataColumnDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dmsDataColumnDo) Create(values ...*model.DmsDataColumn) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dmsDataColumnDo) CreateInBatches(values []*model.DmsDataColumn, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dmsDataColumnDo) Save(values ...*model.DmsDataColumn) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dmsDataColumnDo) First() (*model.DmsDataColumn, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DmsDataColumn), nil
	}
}

func (d dmsDataColumnDo) Take() (*model.DmsDataColumn, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DmsDataColumn), nil
	}
}

func (d dmsDataColumnDo) Last() (*model.DmsDataColumn, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DmsDataColumn), nil
	}
}

func (d dmsDataColumnDo) Find() ([]*model.DmsDataColumn, error) {
	result, err := d.DO.Find()
	return result.([]*model.DmsDataColumn), err
}

func (d dmsDataColumnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DmsDataColumn, err error) {
	buf := make([]*model.DmsDataColumn, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dmsDataColumnDo) FindInBatches(result *[]*model.DmsDataColumn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dmsDataColumnDo) Attrs(attrs ...field.AssignExpr) IDmsDataColumnDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dmsDataColumnDo) Assign(attrs ...field.AssignExpr) IDmsDataColumnDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dmsDataColumnDo) Joins(fields ...field.RelationField) IDmsDataColumnDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dmsDataColumnDo) Preload(fields ...field.RelationField) IDmsDataColumnDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dmsDataColumnDo) FirstOrInit() (*model.DmsDataColumn, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DmsDataColumn), nil
	}
}

func (d dmsDataColumnDo) FirstOrCreate() (*model.DmsDataColumn, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DmsDataColumn), nil
	}
}

func (d dmsDataColumnDo) FindByPage(offset int, limit int) (result []*model.DmsDataColumn, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dmsDataColumnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dmsDataColumnDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dmsDataColumnDo) Delete(models ...*model.DmsDataColumn) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dmsDataColumnDo) withDO(do gen.Dao) *dmsDataColumnDo {
	d.DO = *do.(*gen.DO)
	return d
}
